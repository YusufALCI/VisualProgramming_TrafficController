package com.example.denemecontrol;


import javafx.animation.PathTransition;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.MoveTo;
import javafx.scene.shape.Path;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.Rectangle;
import javafx.util.Duration;

import java.util.HashMap;
import java.util.Map;
import java.util.Queue;

public class CarController {
    private final RoadModel model;
    private final Pane root;
    private final Map<Car, Rectangle> carViews = new HashMap<>();

    public CarController(RoadModel model, Pane root) {
        this.model = model;
        this.root = root;
    }

    // Araç ekle ve doğru pozisyona yerleştir (translate kullanarak)
    public void addCar(Car car, int queueIndex) {
        Queue<Car> queue = model.getQueue(queueIndex);
        queue.add(car);

        Rectangle carRect = new Rectangle(20, 10);
        carRect.setFill(car.getColor());

        // x ve y sıfır, pozisyon translate ile verilir
        carRect.setX(0);
        carRect.setY(0);

        carRect.setTranslateX(car.getxCar());
        carRect.setTranslateY(car.getyCar());

        carViews.put(car, carRect);
        root.getChildren().add(carRect);
    }

    // Kuyruktaki araç için path animasyonu başlat
    public void activatePathForQueue(int queueIndex) {
        Queue<Car> queue = model.getQueue(queueIndex);
        if (queue.isEmpty()) return;

        Car car = queue.poll();
        Rectangle carRect = carViews.get(car);
        if (carRect == null) return;

        Path path = new Path();

        // Başlangıç noktası translate değerleri ile aynı olmalı
        double startX = carRect.getTranslateX();
        double startY = carRect.getTranslateY();
        path.getElements().add(new MoveTo(startX, startY));

        // Kuyruk indeksine göre hedef noktayı ayarla
        switch (queueIndex) {
            case 0 -> path.getElements().add(new LineTo(startX, 650));  // Kuzeyden aşağı
            case 1 -> path.getElements().add(new LineTo(startX, -50));  // Güneyden yukarı
            case 2 -> path.getElements().add(new LineTo(-50, startY));  // Doğudan sola
            case 3 -> path.getElements().add(new LineTo(850, startY));  // Batıdan sağa
            default -> throw new IllegalArgumentException("Geçersiz kuyruk indexi: " + queueIndex);
        }

        PathTransition transition = new PathTransition();
        transition.setNode(carRect);
        transition.setDuration(Duration.seconds(3));
        transition.setPath(path);
        transition.setOnFinished(e -> root.getChildren().remove(carRect));
        transition.play();
    }
}

