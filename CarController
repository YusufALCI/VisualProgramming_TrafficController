package com.example.denemecontrol;


import javafx.animation.PathTransition;
import javafx.application.Platform;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.util.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;

public class CarController {
    private final RoadModel model;
    private final Pane viewPane;
    private final Map<Car, CarView> carViewMap = new HashMap<>();
    private final Map<Car, PathTransition> activeTransitions = new HashMap<>();
    private final double CAR_SPEED = 100; // pixels per second

    public CarController(RoadModel model, Pane viewPane) {
        this.model = model;
        this.viewPane = viewPane;
    }

    public void addCar(Car car, int queueIndex) {
        getQueueByIndex(queueIndex).add(car);
        createAndBindCarView(car);
    }

    private void createAndBindCarView(Car car) {
        if (carViewMap.containsKey(car)) {
            return;
        }
        CarView carView = new CarView(20, 20);
        Rectangle shape = carView.getCarShape();

        // Set initial position
        carView.setTranslateX(car.getxCar());
        carView.setTranslateY(car.getyCar());
        shape.fillProperty().bind(car.colorProperty());

        carViewMap.put(car, carView);
        Platform.runLater(() -> viewPane.getChildren().add(carView));
    }

    public void moveCarFromQueue(int queueIndex) {
        Queue<Car> queue = getQueueByIndex(queueIndex);
        if (queue.isEmpty()) return;

        Car car = queue.poll();
        CarView carView = carViewMap.get(car);
        if (carView == null) return;

        Line path = createMovementPath(queueIndex, car.getxCar(), car.getyCar());
        animateCarAlongPath(car, carView, path);
    }

    private Line createMovementPath(int queueIndex, double startX, double startY) {
        return switch (queueIndex) {
            case 0 -> new Line(startX, startY, startX, 600); // North to South
            case 1 -> new Line(startX, startY, startX, 0);   // South to North
            case 2 -> new Line(startX, startY, 0, startY);   // East to West
            case 3 -> new Line(startX, startY, 800, startY); // West to East
            default -> throw new IllegalArgumentException("Invalid queue index");
        };
    }

    private void animateCarAlongPath(Car car, CarView carView, Line path) {
        double pathLength = Math.sqrt(Math.pow(path.getEndX() - path.getStartX(), 2) +
                Math.pow(path.getEndY() - path.getStartY(), 2));
        double durationSeconds = pathLength / CAR_SPEED;

        PathTransition transition = new PathTransition();
        transition.setNode(carView);
        transition.setPath(path);
        transition.setDuration(Duration.seconds(durationSeconds));
        transition.setOrientation(PathTransition.OrientationType.ORTHOGONAL_TO_TANGENT);

        transition.setOnFinished(e -> {
            activeTransitions.remove(car);
            removeCar(car);
        });

        activeTransitions.put(car, transition);
        transition.play();
    }

    public CarView getCarViewForCar(Car car) {
        return carViewMap.get(car);
    }

    public void displayCarsFromQueue(Queue<Car> carQueue) {
        for (Car car : carQueue) {
            createAndBindCarView(car);
        }
    }

    public void removeCar(Car car) {
        CarView carView = carViewMap.remove(car);
        if (carView != null) {
            Platform.runLater(() -> viewPane.getChildren().remove(carView));
        }
    }

    public void updateAllCarPositions() {
        updateQueue(model.queue1, 50, 100);
        updateQueue(model.queue2, 200, 200);
        updateQueue(model.queue3, 350, 300);
        updateQueue(model.queue4, 500, 400);
    }

    private void updateQueue(Queue<Car> queue, int baseX, int baseY) {
        int spacing = 60;
        int i = 0;
        for (Car car : queue) {
            car.setPosition(baseX + i * spacing, baseY);
            i++;
        }
    }

    private Queue<Car> getQueueByIndex(int index) {
        return switch (index) {
            case 0 -> model.queue1;
            case 1 -> model.queue2;
            case 2 -> model.queue3;
            case 3 -> model.queue4;
            default -> throw new IllegalArgumentException("Ge√ßersiz kuyruk indexi: " + index);
        };
    }

    public void stopAllMovements() {
        activeTransitions.values().forEach(PathTransition::stop);
        activeTransitions.clear();
    }
}
